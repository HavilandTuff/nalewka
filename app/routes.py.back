from flask import render_template, flash, redirect, url_for, request
from flask_login import current_user, login_user, logout_user, login_required
import sqlalchemy as sa
from app import  db
from app.forms import LoginForm, BatchFormulaForm, LiquorForm, RegistrationForm, EditBottlesForm
from app.models import User, Batch, Ingredient, BatchFormula, Liquor
from app.services import create_batch_with_ingredients
from functools import wraps


def handle_db_errors(f):
    """Decorator to handle database errors consistently"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            db.session.rollback()
            flash(f'Database error occurred: {str(e)}', 'error')
            return redirect(url_for('index'))
    return decorated_function


def user_owns_liquor(liquor_id, user_id):
    """Helper function to verify user owns a liquor"""
    return Liquor.query.filter_by(id=liquor_id, user_id=user_id).first() is not None


@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404


@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('500.html'), 500


@app.route('/')
@app.route('/index')
def index():
    if current_user.is_authenticated:
        try:
            liquors = Liquor.query.filter_by(user_id=current_user.id).all()
        except Exception as e:
            flash('Error loading liquors', 'error')
            liquors = []
    else:
        liquors = []
    return render_template('index.html', liquors=liquors)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    form = LoginForm()
    if form.validate_on_submit():
        try:
            user = db.session.scalar(
                sa.select(User).where(User.username == form.username.data))
            if user is None or not user.check_password(form.password.data):
                flash('Invalid username or password', 'error')
                return redirect(url_for('login'))
            
            login_user(user, remember=form.remember_me.data)
            next_page = request.args.get('next')
            if not next_page or not next_page.startswith('/'):
                next_page = url_for('index')
            flash(f'Welcome back, {user.username}!', 'success')
            return redirect(next_page)
        except Exception as e:
            flash('Login error occurred. Please try again.', 'error')
            return redirect(url_for('login'))
    
    return render_template('login.html', title='Sign In', form=form)


@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    form = RegistrationForm()
    if form.validate_on_submit():
        try:
            user = User(
                username=form.username.data,
                email=form.email.data
            )
            user.set_password(form.password.data)
            
            db.session.add(user)
            db.session.commit()
            flash('Registration successful! Please log in.', 'success')
            return redirect(url_for('login'))
        except Exception as e:
            db.session.rollback()
            flash('Registration failed. Please try again.', 'error')
    
    return render_template('register.html', title='Register', form=form)


@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("You've been logged out.", 'info')
    return redirect(url_for('index'))


@app.route('/create_liquor', methods=['GET', 'POST'])
@login_required
@handle_db_errors
def create_liquor():
    form = LiquorForm()
    if form.validate_on_submit():
        liquor = Liquor(
            name=form.name.data,
            description=form.description.data,
            user_id=current_user.id
        )
        db.session.add(liquor)
        db.session.commit()
        flash(f'Liquor "{liquor.name}" created successfully!', 'success')
        return redirect(url_for('index'))
    
    return render_template('create_liquor.html', form=form)






@app.route('/batch_formula', methods=['GET', 'POST'])
@login_required
def batch_formula():
    form = BatchFormulaForm(user_id=current_user.id)
    # ... pre-selection logic ...
    
    if form.validate_on_submit():
        new_batch, error = create_batch_with_ingredients(form.data, form.liquor.data)
        if error:
            flash(f'Error creating batch: {error}', 'error')
        else:
            flash(f'Batch formula created successfully with {len(new_batch.formulas)} ingredients!', 'success')
            return redirect(url_for('liquor_batches', liquor_id=new_batch.liquor_id))
    
    return render_template('batch_formula.html', form=form)


@app.route('/liquor/<int:liquor_id>/batches')
@login_required
def liquor_batches(liquor_id):
    """Display all batches for a specific liquor."""
    try:
        liquor = Liquor.query.filter_by(id=liquor_id, user_id=current_user.id).first()
        if not liquor:
            flash('Liquor not found or access denied.', 'error')
            return redirect(url_for('index'))
        
        batches = Batch.query.filter_by(liquor_id=liquor_id).order_by(Batch.date.desc()).all()
        return render_template('liquor_batches.html', liquor=liquor, batches=batches)
    except Exception as e:
        flash(f'Error loading batches: {str(e)}', 'error')
        return redirect(url_for('index'))


@app.route('/batch/<int:batch_id>/edit_bottles', methods=['GET', 'POST'])
@login_required
def edit_batch_bottles(batch_id):
    """Edit bottle information for a specific batch."""
    try:
        batch = Batch.query.filter_by(id=batch_id).first()
        if not batch:
            flash('Batch not found.', 'error')
            return redirect(url_for('index'))
        
        # Verify the batch belongs to the current user
        if batch.liquor.user_id != current_user.id:
            flash('You do not have permission to edit this batch.', 'error')
            return redirect(url_for('liquor_batches', liquor_id=batch.liquor_id))
        
        form = EditBottlesForm()
        
        if request.method == 'GET':
            # Pre-populate form with current data
            form.bottle_count.data = batch.bottle_count or 0
            # Convert from ml to display unit
            if batch.bottle_volume:
                form.bottle_volume.data = batch.bottle_volume
                form.bottle_volume_unit.data = 'ml'
            
        if form.validate_on_submit():
            # Convert to milliliters if needed
            bottle_volume_ml = form.bottle_volume.data
            if form.bottle_volume_unit.data == 'l':
                bottle_volume_ml = bottle_volume_ml * 1000
            
            batch.bottle_count = form.bottle_count.data
            batch.bottle_volume = bottle_volume_ml
            batch.bottle_volume_unit = 'ml'  # Always store in ml
            
            db.session.commit()
            flash('Bottle information updated successfully!', 'success')
            return redirect(url_for('liquor_batches', liquor_id=batch.liquor_id))
        
        return render_template('edit_bottles.html', form=form, batch=batch)
        
    except Exception as e:
        db.session.rollback()
        flash(f'Error updating bottle information: {str(e)}', 'error')
        return redirect(url_for('index'))


@app.route('/batch/<int:batch_id>/details')
@login_required
def batch_details(batch_id):
    """Display detailed information about a specific batch."""
    try:
        batch = Batch.query.filter_by(id=batch_id).first()
        if not batch:
            flash('Batch not found.', 'error')
            return redirect(url_for('index'))
        
        # Verify the batch belongs to the current user
        if batch.liquor.user_id != current_user.id:
            flash('You do not have permission to view this batch.', 'error')
            return redirect(url_for('index'))
        
        return render_template('batch_details.html', batch=batch)
        
    except Exception as e:
        flash(f'Error loading batch details: {str(e)}', 'error')
        return redirect(url_for('index'))